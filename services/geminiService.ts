
import { GoogleGenAI } from "@google/genai";

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY! });

export const getExerciseImage = async (exerciseName: string): Promise<string> => {
  try {
    const response = await ai.models.generateImages({
        model: 'imagen-4.0-generate-001',
        prompt: `A clear, high-quality, anatomically correct illustration of a person performing a "${exerciseName}" exercise. The image should be in a simple, clean, vector style with a white background. Show the start and end positions if applicable to demonstrate the movement. Focus on the muscles being worked.`,
        config: {
          numberOfImages: 1,
          outputMimeType: 'image/png',
          aspectRatio: '1:1',
        },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      return response.generatedImages[0].image.imageBytes;
    } else {
      throw new Error('No image was generated by the API.');
    }
  } catch (error) {
    console.error('Error generating exercise image with Gemini:', error);
    if (error instanceof Error) {
        if (error.message.includes('API key not valid')) {
            throw new Error('The API key is invalid. Please check your configuration.');
        }
        if (error.message.includes('quota')) {
            throw new Error('API quota exceeded. Please try again later.');
        }
    }
    throw new Error('Failed to generate exercise image. The AI service may be temporarily unavailable.');
  }
};

export const getNutritionInfo = async (foodQuery: string): Promise<string> => {
    try {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: `Analyze the following food description and return its nutritional information for a 100g serving in JSON format. The description is: "${foodQuery}". The JSON object should have keys: "name", "calories", "protein", "carbs", "fat". If you cannot determine the food, return an error in the JSON.`,
            config: {
                responseMimeType: 'application/json',
            },
        });
        return response.text;
    } catch (error) {
        console.error('Error getting nutrition info with Gemini:', error);
        throw new Error('Failed to get nutrition information.');
    }
};
